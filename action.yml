name: install/cache apt tools

inputs:
  tools:     { required: true,  type: string }
  cache:     { required: false, type: string, default: yes }
  cache-gen: { required: false, type: string, default: v1 }
  pip:       { required: false, type: string, default: pip3 }
  sudo:      { required: false, type: boolean }

outputs:
  cache-hit:
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: composite
  steps:

    - id: setup
      shell: bash
      run: |
        case "${{ inputs.cache }}" in
          yes|workflow) cache="${{ inputs.cache }}" ;;
          *)            cache=no ;;
        esac
        pip="${{ inputs.pip }}"
        gen="${{ inputs.cache-gen }}"
        tools="${{ inputs.tools }}"
        hash=$( (uname -mrsv; $pip --version; echo $gen $tools) | md5sum | awk '{print $1}' )
        [ "$cache" == 'workflow' ] && hash=$hash-${{ github.run_id }}
        [ "${{ inputs.sudo }}" == true ] && hash=$hash-sudo
        cat << END
        ::set-output name=cache::$cache
        ::set-output name=archive::/tmp/python-package.tz
        ::set-output name=hash::$hash
        END

    - id: cache
      if: steps.setup.outputs.cache != 'no'
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup.outputs.archive }}
        key:  ${{ steps.setup.outputs.hash }}

    - id: extract
      if: steps.setup.outputs.cache != 'no' && steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        sudo= ; [ "${{ inputs.sudo }}" == true ] && sudo=sudo
        archive="${{ steps.setup.outputs.archive }}"
        ls -l $archive
        [ -f $archive ] && $sudo tar -C / -xvzf $archive

    - id: install
      if: steps.setup.outputs.cache == 'no' || steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        pip="${{ inputs.pip }}"
        sudo= ; [ "${{ inputs.sudo }}" == true ] && sudo=sudo
        $sudo $pip install ${{ inputs.tools }}

    - id: archive
      if: steps.setup.outputs.cache != 'no' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        pip="${{ inputs.pip }}"
        sudo= ; [ "${{ inputs.sudo }}" == true ] && sudo=sudo
        tools="${{ inputs.tools }}"
        archive="${{ steps.setup.outputs.archive }}"
        list=/tmp/pip-list.out
        $sudo env PIP=$pip ./pip-list.sh $tools > $list
        $sudo tar -cvzf $archive -T $list
        ls -l $archive
